=head0 Web Frameworks

Web development in Perl started with the X<CGI> X<Module, CGI> C<CGI>
module. It includes mechanisms to generate HTML from Perl statements,
and to access CGI parameters, sessions and cookies. Although it is a
quite powerful method it is showing signs of age, and there are a wide
variety of other tools that make Web development easier, more
structured and faster. These are the main reasons why the C<CGI>
module will not be the focus of this chapter. Yet another reason is the
quantity of books and tutorials that are available that teach how to
develop with C<CGI>.

There are many Web Frameworks in Perl, and with the advent of
C<PSGI> and C<Plack> X<PSGI> X<Module, PSGI> X<Plack> X<Module, Plack>
the interface between web servers and Perl has become more user friendly,
which has in turn lead to even more frameworks.

This book does not intend to be a full reference to CPAN modules, or
to be a in-depth book on extremely technical aspects. These reasons made us
decide not to discuss C<PSGI> or C<Plack> directly, but present
frameworks that use them, like C<Dancer> or C<Mojolicious>. With this
same idea in mind, we will not cover deployment, as there are too many
options (from Apache C<mod_perl>, FastCGI running under Apache or
nginx, using Starman, and others). Instead, we describe how to get
code running for in development. We recommend you then read the
documentation for the specific deployment method you plan to use.

This section will B<introduce> Web programming using four different
web frameworks:

=over

=item B<Catalyst>

The X<Module, Catalyst> X<Catalyst> C<Catalyst> web framework is
probably the most well known nowadays. It is a complete and efficient
web framework. Its main drawback if the complexity of projects for new
developers. There are some book about it, which explain why our
section on it is quite reduced.

=item B<Mason>

The success of PHP lead to some similar approaches for other
languages. There are different tries to get a module with a similar
philosophy, but C<Mason> X<Module, Mason> X<Mason> is probably the
only one that was widely used. Not because of following a PHP-like
approach, but for taking it a step forward.

=item B<Mojoliciou>

C<Mojolicious> was developed after C<Catalyst>, by the same main
author. The idea was to simplify it, making it easier to use and
lighter. 

=item B<Dancer>

Heavily inspired by Ruby's Sinatra, C<Dancer> has gained adherents over
recent months. The fact that one of the authors of this book is a C<Dancer>
developer was a good enough reason to include it here.

=back

=head1 Catalyst

X<Module, Catalyst> X<Catalyst>

=head1 Mason

X<Module, Mason> X<Mason>

=head1 Mojolicious

X<Module, Mojolicious> X<Mojolicious>

=head1 Dancer

X<Module, Dancer> X<Dancer> C<Dancer> has a nice command that eases
the task of creating the required files to run a C<Dancer> web
site. In fact, the C<dancer> application creates not just the required files,
but also a typical Perl module structure and a simple
running web site. Use the following command:

    dancer -a MyApp

A folder named C<MyApp> will be created, with a number of files. In the
next section we will analyze this folder structure.

=head2 *Default Dancer Application Structure

The structure scaffolded by C<Dancer> is presented bellow, together
with some comments on their meaning. Note that this structure already
includes code that already runs and presents a simple web page with
some C<Dancer> configuration variables. To make this page nicer,
C<Dancer> authors added some style sheets and images. This decision
explains why the C<dancer> script creates this kind of files.

Also, C<Dancer> applications are full Perl modules. This second
decision explains why there is a C<Makefile.PL> (where you should add
all your application dependencies), a C<MANIFEST> and C<MANIFEST.SKIP>
files, that list the files that should and should not be included in
the Perl module, a C<lib> folder with a module (with the same name of
your application) and a C<t> folder with some basic tests for your
application.

=begin figure Structure of a C<Dancer> scaffolded application.

=for latex

\begin{minipage}{\textwidth}
\renewcommand*\DTstylecomment{\it}
\dirtree{%
 .1 MyApp/. 
 .2 Makefile.PL\DTcomment{Dancer applications are Perl Modules!}. 
 .2 MANIFEST. 
 .2 MANIFEST.SKIP. 
 .2 config.yml\DTcomment{Generic application configuration}. 
 .2 environments/. 
 .3 development.yml\DTcomment{Specific development configuration}. 
 .3 production.yml\DTcomment{Specific production configuration}. 
 .2 bin/. 
 .3 app.pl\DTcomment{Stand-alone PSGI development server}. 
 .2 views/. 
 .3 index.tt\DTcomment{Template used on the index route}. 
 .3 layouts/. 
 .4 main.tt\DTcomment{Global layout template}. 
 .2 lib/. 
 .3 MyApp.pm\DTcomment{Where you route code lays}. 
 .2 public/. 
 .3 500.html\DTcomment{Page to show on 500 error}. 
 .3 404.html\DTcomment{Page to show on 404 error}. 
 .3 dispatch.cgi\DTcomment{Dispatcher to use with CGI}. 
 .3 dispatch.fcgi\DTcomment{Dispatcher to use with FastCGI}. 
 .3 javascripts/. 
 .4 jquery.js\DTcomment{Yes, Dancer ships with jquery}.
 .3 css/. 
 .4 \ldots\DTcomment{A couple of style sheets}.
 .3 images/. 
 .4 \ldots\DTcomment{And a couple of image files}. 
 .2 t/. 
 .3 001\_base.t\DTcomment{Tests if your application loads}. 
 .3 002\_index\_route.t\DTcomment{Tests if your application has a root route handler}. 
}
\end{minipage}

=end

=end figure

We will dissect some of these files in the next paragraphs.

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:
