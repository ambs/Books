
=head0 Modern Perl OO

Z<chap:OO>

X<Moo>X<Module, Moo> X<Moose>X<Module, Moose> X<Mouse>X<Module, Mouse>
X<OO Programming> Perl always suffered from the lack of a rigid object
oriented system. Although blessed references did the trick for years,
developers felt sorry they did not have support for some common OO
features, like interfaces (or roles), multiple inheritance and
encapsulation.

A few years ago C<Moose> appeared. At first it was quite slow and its
usage was discouraged. Fortunately, in the last years, C<Moose> became
quite fast and includes a lot of relevant and useful features.

Nevertheless, C<Moose> is still quite slow for applications that need
to start every time. That is, in applications like CGI scripts, that
are parsed and run every time a request is made, the overhead of
loading C<Moose> is not acceptable.

To solve this problem some developers started C<Mouse>, a smaller
implementation that does not include all C<Moose> functionalities, but
only the more relevant ones. It maintains the API compatibility with
C<Moose>, making it easier to switch whenever needed.

Another implementation, named C<Moo>, claims to be yet smaller and
faster than C<Mouse>, although it does not have much users yet.

Given that all these modules share the basic syntax, this chapter
structure will be slightly different from the next ones. First, we
will present C<Moo>, then, what C<Mouse> offers over C<Moo>, and
finally, what C<Moose> offers more than C<Mouse>. This approach will
make this chapter smaller and help the reader when choosing one
implementation.

=head1 Moo

X<Moo>X<Module, Moo>

=begin CPANinfo

B<Version:> 0.009008

B<CPAN:> L<http://search.cpan.org/dist/Moo>

=end CPANinfo

C<Moo> uses the usual approach to define objects: use packages (the
Perl equivalent to what we are used to call classes).

=head2 *Attributes

Follows a simple example of a I<Person> object with two attributes,
I<name> and I<phone>. The first is a read only attribute (you can't
change the person name after initializing the object) while the second
has read/write permissions. This information is used by C<Moo> to
define whether to create accessors that are able to set and get
values, or just get values. The I<required> option means that every
time a I<Person> object is created a name must be providedN<< All
packages in Perl should return a true value after successful
load. That is why they usually have a last line with C<1;>.  In the
following examples we will add that line every time the example is a
full package. >>.

=begin Perl

 package Person;
 use Moo;

 has name  => ( is => 'ro',  required => 1 );
 has phone => ( is => 'rw' );
 1;

=end Perl

Note that the fat arrow is equivalent to a comma, and the parenthesis
are not needed. The first attribute could be defined as:

  has "name", "is", "ro", "required", 1;

but its legibility is not the same. Therefore we will stick to the
usage of the fat arrow together with parenthesis or indentation to
group attribute options.

This object usage is similar to the usage of standard blessed
reference objects. C<Moo> creates automatically the constructor and
accessors.

=begin Perl

 use Person;

 my $person = Person->new(name => 'John');
 print $person->name;

 $person->phone("93453423");
 print $person->phone;

=end Perl

Unlike the next two alternatives, C<Moo> doesn't have a type
system. If you need to guarantee that an attribute keeps a specific
type of data, you need to validate it yourself. That is done adding a
code reference. The next example is a redefinition of the attribute
C<phone> forcing a nine digits string:

=begin Perl

 has phone =>
      is  => 'rw',
      isa => sub {
         die "Need a nine digit string!" unless $_[0] =~ /^\d{9}$/
      };

=end Perl

Attributes can have default values. This is specified using the
C<default> option. It takes a code reference that receives the object,
and should return the new value. Note that you should not rely on
other attributes for this initialization as there is no guarantee that
they were already populated (for that use I<lazy> attributes). As an
example, you can create an attribute C<gender> and define it
automatically to I<female> if not specified.

=begin Perl

 has gender =>
      is => 'ro',
      default => sub { return 'female' };

=end Perl

If the default value need to be computed based on some attributes, or
the task of computing it is time or CPU expensive, you can define the
attribute as I<lazy> (set it to a true value). This way the value will
only be computed when it is first accessed.

When some code should run after a specific attribute is set a
C<trigger> should be used. It is just a code reference that will be
called over the object, with the new value as argument. For instance,
when a phone number is registered, call some method to send a SMS to
the new number acknowledging the change:

=begin Perl

 has phone =>
      is  => 'rw',
      isa => sub {
         die "Need a nine digit string!" unless $_[0] =~ /^\d{9}$/
      },
      trigger => sub {
         send_sms( to => $_[1],
                   msg => "Phone number correctly updated.")
      };

=end Perl

=head2 *Inheritance and Roles

The usual inheritance between classes is also possible. In fact,
C<Moo> supports multiple super-classes. They are defined with the
C<extends> methodN<< Calling C<extends> more than once will B<replace>
the super-classes, not add a new. >>:

=begin Perl

 package Student;
 extends 'Person';

 has final_grade => ( is => 'rw' );
 1;

=end Perl

One of C<Moo> premises to remain small is to not support
C<super>. This means it is not that easy to override
methods. Nevertheless it can be done using method modifiers (see
A<moomodifiers>).

If the code being extended (the super-class) will never be
instantiated, probably you want to use I<roles>. I<Roles> can be seen
as the Java interfaces, or as a specific set of methods that implement
a specific functionality. C<Moo> roles are defined using the
C<Role::Tiny> X<Module, Role::Tiny> X<Role::Tiny> module.

The definition of a role is simple. Create a brand new package, use
C<Role::Tiny>, and write all the code the role should implement. As a
simple example consider a role that dumps the object to the standard
error (useful for debugging):

=begin Perl

 package Dumper::Role;
 use Role::Tiny;
 use Data::Dumper;

 sub dump {
   my $self = shift;
   print STDERR Dumper($self);
 }

 1;

=end Perl

Now, you can switch from role to role using C<with>. For simplicity
C<Moo> activates only one role at a time. Our main program now can
say:

=begin Perl

 use Moo;
 use Person;

 my $person = Person->new(name => 'Mary', phone => '987654321');

 with 'Dumper::Role';
 $person->dump;

=end Perl

Note that the C<dump> method is not implemented in the I<Person>
class, but rather in the role. This means you can activate this role
for any object.

=head2 *Method Modifiers

Z<moomodifiers>X<Class::Method::Modifiers>X<Module, Class::Method::Modifiers>

The method modifiers here described are not really part of the object
system, but are available in C<Moo> as a workaround for some
limitations, like the lack of access to C<super>. They are implemented
though the C<Class::Method::Modifiers> module that can be used
independently.

These methods can be viewed as hooks that are called before and/or
after some methods are called. As an example, we want to add a line of
debug before dumping a person. Therefore, in the C<Person.pm> file we
will switch to the role that implements C<dump>, and activate a
modifier, asking to run some code before the actual method:

=begin Perl

   with 'Dumper::Role';
   before dump => sub { print STDERR "Dumping a Person!\n" };

=end Perl

The method will receive the same arguments as the method
itself. Return values are ignored, but you can change C<@_> directly,
and the changed values will be received by the original method.

C<after> works in the same way, and receives C<@_> as the original
method received. This means that if the original method changes the
values, C<after> will receive them modified.

Finally, there is C<around>, that is called instead of the original
method. This means that the code run should call the original method
(if needed, or just ignore it). For that to be possible, the code you
define will receive as first argument the method that is being
replaced. Suppose you have a role that implements a method similar
with the described above, to send a SMS message, but that uses the
phone number stored in the object, but you need to add a prefix to the
number ("+0", for instance) before calling it, and that you need to
get the result (a boolean) and transform it into a string "OK" or
"NOK":

=begin Perl

  with 'SMS::Role';
  around send_sms => sub { 
           my ($orig, $self, $message) = @_;

           my $number = $self->phone; # save number
           $self->phone("+0$number");
           my $ok = $self->$orig($message);
           $self->phone($number); # revert number
           return $ok ? "OK" : "NOK";
  }

=end Perl

=head1 Mouse

X<Mouse>X<Module, Mouse>

=begin CPANinfo

B<Version:> 0.93

B<CPAN:> L<http://search.cpan.org/dist/Mouse>

=end CPANinfo

As mentioned in this chapter introduction C<Mouse> aims to be a subset
implementation of C<Moose>, with fewer dependencies, with an optional
XS back-end (meaning you will not necessarily need a C<< C >>
compiler) and reducing the C<Moose> startup time.

=head2 *Attributes

The syntax for defining attributes is the same C<Moo> uses. The first
main difference is that C<Mouse> introduces a type system, instead of
the code reference that C<Moo> uses to check values types. Some of
C<Mouse> data types are: C<Any> to store anything, C<Bool> for boolean
values, C<Str> to store a string or a number, just like Perl scalar
variables handle them, C<Num> for numbers, including reals, C<Int> for
integer numbers, C<ClassName> when you are storing a object class
name, C<Ref> for any kind of reference, C<ScalarRef> for a reference
to a scalar, C<ArrayRef> to a reference to an array, C<HashRef> to a
reference to hashes, C<RegexpRef> for regular expressions, etc. You
can get a detailed list and their relationship in the
C<Mouse::Util::TypeConstraints>. This
module also allows you to define sub-types based on the built-in
types. Finally, if you define a type name that is unknown, C<Mouse>
will interpret it as the name of a class that should be checked using
C<ref>.

The C<default> value for the attribute can be set like with C<Moo>
using a code reference, but it is also possible to specify directly a
value. But be caution about references.

Our I<Person> class is written with C<Mouse> as follows:

=begin Perl

 package Person;
 use Mouse;

 has name =>  (
      is => 'ro', required => 1,  isa => 'Str',
 );

 has phone => (
      is      => 'rw',
      isa     => 'Str',
      trigger => sub {
         send_sms( to => $_[1],
                   msg => "Phone number correctly updated.")
      },
  );

 has gender => (
      is => 'ro', default => "female",
 );

 1;

=end Perl

There are some relevant differences in this code. First, we are not
requiring the phone number to have nine digits. Check
A<typeconstraints> for a solution through subtypes. The other
difference is more subtle: the C<trigger> method receives the same
first two arguments as the C<Moo> example, but a third argument is
also supplied: the value before the attribution takes place.

=head2 *Inheritance and Roles

Inheritance in C<Mouse> is also handled using the C<extends> method.
Note that when redefining an attribute in a subclass you need to
prepend a plus sign to the name of the attribute begin redefined:

   has +name => ( is => 'rw', required => 1, isa => 'Str' );


Regarding roles (handled by C<Mouse::Role> X<Mouse::Role> X<Module,
Mouse::Role>), they are very similar in behavior with C<Moo> roles.

The main difference is that a C<Mouse::Role> can require that the
object that uses it implements some methods. That is specified with
the C<requires> method. As an example, consider a role that adds
arithmetic to any object that can be converted to a real value. For
that to be possible, the object must implement a method named
C<value>.  The role will use this method to perform the arithmetic
operation.

=begin Perl

  package Arithmetics;
  use Mouse::Role;

  requires 'value';

  sub add {
    my ($self, $other) = @_;
    return $self->value + $other->value;
  }

  1;

=end Perl

Now, an object that represent stock exchange values can add stock
values together:

=begin Perl

  package Stocks;
  use Mouse;

  has name  => ( is => 'rw', isa => 'Str' );
  has qt    => ( is => 'rw', isa => 'Int' );
  has price => ( is => 'rw', isa => 'Num' );

  sub value {
    my $self = shift;
    return $self->qt * $self->price;
  }

  with 'Arithmetics';

  my $stock1 = Stocks->new( qt => 10, price => 1.1 );
  my $stock2 = Stocks->new( qt => 5,  price => 4.3 );
  my $total_amount = $stock1->add($stock2);

  1;

=end Perl

Note that you can use an accessor to satisfy the role
C<requires>. This object that represents a product and its market
value would work as well:

=begin Perl

  package Product;
  use Mouse;

  has name  => ( is => 'rw', isa => 'Str' );
  has value => ( is => 'rw', isa => 'Int' );

  with 'Arithmetics';

  my $prod1 = Product->new( value => 3 );
  my $prod2 = Product->new( value => 5 );
  my $total_prods = $prod1->add($prod2);

  1;

=end Perl

You just need to make sure that the line with the C<has> that defines
the attribute which accessor will satisfy the requirements is defined
before composing the role. With this role you can even add different
type of classes, given they satisfy the C<Arithmetics> role.

As a final note, C<Mouse> supports more than one role at a time. Just
take care about the order you use them. It might be relevant.

=head2 *Method Modifiers

C<Mouse> supports C<before>, C<after> and C<around>, just like C<Moo>
The main difference is that they accept a regular expression, and will
apply the modifier to all the methods that match the expression.

=head2 *Type Constraints

Z<typeconstraints> X<Module,
Mouse::Util::TypeConstraints> X<Mouse::Util::TypeConstraints>

To have built-in types is a cool feature, but can be limiting. If you
compare our I<Person> example using C<Moo> and C<Mouse>, you will
notice that C<Moo> restricts phone numbers to have only a fixed amount
digits while C<Mouse> accepts any string.

The solution to make C<Mouse> more picky about its values is to define
new data types. This is performed using the
C<Mouse::Util::TypeConstraints> module, that defines new data types
based on C<Mouse> basic types.

=begin Perl

  use Mouse::Util::TypeConstraints;

  subtype 'PhoneNumber'
    => as 'Str'
    => where { m/^\d{9}$ }
    => message { "The string ($_) is not a valid phone number." };

=end Perl

This code specifies the base data type (String), a code block that
returns true for valid values, and a code block with the action or
message that should be performed when the value is not valid.

We can enhance our I<Person> class with some more interesting data
types. For example, we know that the gender value will be one of I<male>
or I<female>:

   enum 'Gender' => ('male', 'female');

C<Mouse::Util::TypeConstraints> allows the user to specify how to
convert between data types. For instance, if we have a C<Time> data
type that is defined in a string, that contains information on number
of minutes and number of seconds, we can tell how to convert it to a
number (computing the total number of seconds, for instance):

=begin Perl

  use Mouse::Util::TypeConstraints;

  subtype 'Time'
    => as 'Str' => where { m[/^ \d+ m \d+ s $]x };

  coerce 'Num'
    => from 'Time'
    => via { m[^ (\d+) m (\d+) s $]x; $1*60+$2 };

=end Perl

The C<Time> value can be coerced to a number filling some object
attribute. The only requirement is that the attribute has the
C<coerce> option to true. The following example presents two
attributes, one for a C<Time> value, than whenever is changed,
triggers the update of the number of seconds.  The opposite would be
also possible after defining a C<coerce> rule from C<Num> to C<Time>.

=begin Perl

  has time => (
    is      => 'rw',
    isa     => 'Time',
    trigger => { 
       my ($self, $value) = @_;
       $self->seconds($value);
    },
  );

  has seconds => (
    is     => 'rw',
    isa    => 'Num',
    coerce => 1,
  );

=end Perl

It is part of the good practices to unload the module as soon as you
defined your types (this will undefine all the syntactic sugar
exported by the module):

   no Mouse::Util::TypeConstraints;

=head2 *Meta-Model

X<Module, Mouse::Meta::Class> X<Mouse::Meta::Class>

Another interesting feature of C<Mouse> (and C<Moose>) is the ability
to query and change the object meta information (known in this context
as meta-model). This meta-model defines the structure of the object:
which attributes are defined, their definition details, whose methods
are defined, its hierarchy and possible roles.

To query a class meta-model you need to have an instance of it. The
easiest way to access it (from inside the class definition file) is
using:

   my $meta = __PACKAGE__->meta;

Some of the B<methods> you can call on a meta-model object are:

=over

=item C<superclasses>

is an accessor that retrieves the list of all super-classes for that
class. It can also be used to set them.

   my @superclases = $meta->superclasses();

=item C<has_method>

returns a boolean value given a method name. The value will be true
if the class implements that method:

   $meta->has_method("compare");

=item C<add_method>

lets you add method to the class. It receives the method name and the
reference to a code block:

   $meta->add_method( dump => sub {
           use Data::Dumper; Dumper($_[0]); 
   });

=item C<has_attribute>

works just like C<has_method> but returns a true value if there is an
attribute with the supplied name:

   $meta->has_attribute("gender");

=item C<add_attribute>

lets you add a new attribute, works mostly like C<has>, but over a
meta-class object:

   $meta->add_attribute("age", is => "rw", isa => "Int");

=back

Some of these methods are polymorphic, and can cope with other type of
arguments. There are accessors to attributes and methods, just like
the setters explained above. This section will finish here. For
further documentation please read C<Mouse::Meta::Class> for a list of
the available methods, and C<Moose::Meta::Class> for their
explanation.

=head1 Moose

X<Moose>X<Module, Moose>

=begin CPANinfo

B<Version:> 2.0007

B<CPAN:> L<http://search.cpan.org/dist/Moose>

=end CPANinfo

The path between C<Mouse> and C<Moose> is simple, as C<Mouse> was
designed for compatibility. But C<Moose> has much more features as we
will see. In-depth discussion on C<Moose> can be read on Dave Rolsky
and Stevan Little book available from LuluN<<
L<http://www.lulu.com/product/paperback/moose/5187831> >>.

=head2 *Attributes

C<Moose> attributes basic functionalities are similar to C<Mouse>
attributes. There are few extra functionalities, like the definition
of C<traits> or C<handles>, but these will not be covered in this
book. Please read the C<Moose> manual page for details.

=head2 *Inheritance and Roles

C<Moose> makes it possible to require that a superclass or a role
being imported satisfy a minimum module version. That is done passing
a hash reference after each superclass or role:

  extends 'Some::Parent'  => { -version => 3.20 },
          'Other::Parent' => { -version => 1.03 };

The syntax for roles is similar, just replace C<extends> with
C<with>. Roles are defined by the C<Moose::Role> X<Moose::Role>
X<Module, Moose::Role> module.

=head2 *Method Modifiers

C<Moose> extends the three basic method modifies (C<before>, C<after>
and C<around>) with some new:

=over

=item C<override>

Receive the name of the method being overridden, and the
code. Although the same behavior can be obtained without using
C<override> and defining a standard function, using C<override> will
make it clearer that you are overriding the method. Inside your code
you can call C<super> to access this method original definition in the
superclass.

=item C<augment>

The C<augment> method modifier is not easy to explain. You can see it
as the inverse of C<override>, and its companion method C<inner> as
the inverse of C<super>. When you call an C<augment>ed method,
C<Moose> will start with the top superclass definition, and substitute
its C<inner> invocation by its child C<augment> code. This process
will be repeated until you reach the bottom class. A complete example
of this functionality is described in
C<Moose::Cookbook::Basics::Recipe6>.

=back

=head2 *Type Constraints

X<Moose::Util::TypeConstraints> X<Module, Moose::Util::TypeConstraints>

Basic type constraints functionalities are similar with C<Mouse>. They
are handled by the C<Moose::Util::TypeConstraints> module.

=head2 *Meta-Model

X<Moose::Meta::Class> X<Module, Moose::Meta::Class> C<Moose> meta
class model is richer than C<Mouse> model, but again, their extended
use is too advanced to be fully described here. You can read about its
functionalities in C<Moose::Meta::Class>.

In addition to C<add_method> there are also C<add_override_method_modifier>
and C<add_augment_method_modifier>.

There is the possibility to access all roles attached to a class with
C<calculate_all_roles>.  Check if a specific class does a role with
C<does_role>.

=begin SeeAlso

C<MooseX> is the namespace for Moose extensions. You can read
C<Moose::Manual::MooseX> X<Moose::Manual::MooseX> X<Module,
Moose::Manual::MooseX> for a list of some common and useful
extensions. Follow some examples.

C<MooseX::StrictConstructor> X<MooseX::StrictConstructor> X<Module,
MooseX::StrictConstructor> will make your module complain if you pass
any attribute name to the constructor that is not defined (by default
C<Moose> will quietly ignore any unknown attribute names).

C<MooseX::Getopt> X<Module, MooseX::Getopt> X<MooseX::Getopt> lets you
define command line options as if they were standard C<Moose> attributes.

C<MooseX::Declare> X<Module, MooseX::Declare> X<MooseX::Declare> is
used to define methods signature as you would in a typed language like
C or Java. At the moment it is still in alpha stage, but there are
high hopes on it.

If you use a basic subset of C<Moose> you might want to use
C<Any::Moose> X<Any::Moose> X<Module, Any::Moose>. This module will
load C<Moose> or C<Mouse> accordingly with the modules available on
your system. The following lines can be used to load the object
system, the role system and the type constraints system:

  use Any::Moose;                           # for classes
  use Any::Moose 'Role';                    # for roles
  use Any::Moose '::Util::TypeConstraints'; # for types

=end SeeAlso

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:

