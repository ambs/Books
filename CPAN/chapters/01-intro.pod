
=head0 The Comprehensive Perl Archive Network

X<CPAN> The Comprehensive Perl Archive Network, known as CPANN<< It is
named after another archive, The Comprehensive TeX Archive Network, an
archive of TeX and LaTeX modules and styles. >> is an archive of Perl
applications, modules and frameworks.  It is available through the
Network and is Comprehensive, in the sense that it is a large
collection, but also that it includes nearly all developed modules,
and they are available in an organized way.

Note that CPAN does not have any kind of guarantee that the available
modules are not malicious, or that provides the documented
features. Therefore, knowing what modules are being used by the
community is great, as it gives information about their quality and
trust.

CPAN is available from L<http://cpan.org/> or one of the hundreds of
available mirrors around the world. You can access the modules using 
C<FTP>, C<HTTP> or, more interestingly, using the search feature of 
CPAN. It will give you information on the module author, what the 
latest version is, points to the download file, gives you access to 
the module documentation and a rating system, where users can rate modules.

There are a bunch of other web sites that were developed to make the
CPAN experience richer. There are some of them:

=over

=item B<AnnoCPAN>

X<CPAN, AnnoCPAN>
AnnoCPAN (L<http://www.annocpan.org>) gives you access to modules
documentation, but also to annotations over that documentation. What
this means, is that any user can annotate the documentation with
further information, incoherences and other (relevant) information.

=item B<CPAN Forum>

X<CPAN, Forum>
CPAN Forum (L<http://cpanforum.com/>) offers a forum for each
module. Some authors maintain their forum active, some others do not
use them. Some others, prefer to create forums in other web sites, or
to create mailing lists.

=item B<CPAN Testers>

X<CPAN, Testers>
CPAN Testers (L<http://static.cpantesters.org/>) gives information
about how each module installs, and how their tests pass or fail in
different architectures and perl versions.  When installing a module, 
if the build fails, this web site can be used to detect whether it is 
a local fail, or a known bug. For module developers it is very valuable
to check if modules are portable and if tests pass on different systems, helping
all authors to improve the quality and reliability of their code.

=item B<CPAN Ratings>

X<CPAN, Ratings>
CPAN Ratings (L<http://cpanratings.perl.org/>) allows users of modules to
leave ratings and reviews on Perl modules, providing useful information to
other users looking for a module to fulfil a particular task and facing
multiple modules to decide between.  Ratings are visible when viewing
distributions on L<http://search.cpan.org/>.

=back

=head1 Installing CPAN Modules

X<Module, installing>
There are three main different ways to install a module from CPAN: using
an automated installation tool, like C<cpan>, C<cpanp> or C<cpanm>, installing a
package provided by your OS vendor, or installing manually.  Installing packages
from the OS vendor's repo (for instance, via C<apt-get> for Debian-based
systems) is preferred by some, but packages can lag behind the latest versions
available on CPAN.

Installing modules using CPAN.pm (C<cpan>), CPANPLUS (C<cpanp>) or cpanminus
(C<cpanm>) is considered ideal by many, as it provides easy installation with 
automated tests and dependency handling, but allows you to install the freshest 
version available from CPAN.

Installing manually gives the most control, but forces you to deal with
satisfying dependencies yourself; for a module with a long dependency chain on a
fresh Perl install, this can be a real pain.

=head2 *Using C<cpan>

X<Command, cpan> X<cpan>
The command line tool C<cpan> ships with Perl, and can be described as
the official tool to install modules. The only situations whether you
probably do not have C<cpan> installed in your system are derived of
using ActiveState ActivePerl (in this case read the section on
C<PPM>), or using a Linux distribution that splits the Perl package in
smaller packages. In this case use your package system and search for
the C<cpan> package.

Usually you want to run C<cpan> as a system administrator, so you have
the needed permissions to write into the system tree.  Alternatively, the CPAN
client can run as a normal user, and be configured to use C<sudo> where required
to perform the final installation; this has the benefit of making the test suite
run as a normal user, which can be preferable for security.

Recent C<cpan>
versions have an automated configuring system. Nevertheless, if you
run C<cpan> and it asks a lot of questions, you are safe on choosing
the default answers. Just take care to choose a nearby mirror, so
packages download faster.  

C<cpan> can be used from the command line issuing:

    cpan Module::Name Another::Module

This will install in your system the two modules C<Module::Name> and
C<Another::Module>. The other approach is using C<cpan> shell. For
that, just type C<cpan> in your command line, and a C<cpan> shell will
appear. You can get help on the C<cpan> shell commands using "C<h>". To
install modules use the "C<i>" command.

If for some reason the C<cpan> command is not installed, you can try to execute
the CPAN.pm shell with:

  perl -MCPAN -e shell

Z<cpaninstall>

=begin screen Simple cpan interaction

 cpan shell -- CPAN exploration and modules installation
 Enter 'h' for help.
  
 cpan[1]> i Module::Name Another::Module

=end screen

=head2 *Using C<cpanp>

X<Command, cpanp> X<cpanp> X<Module, CPANPLUS>
C<cpanp> is the command line tool to the C<CPANPLUS> module, that
enhances the C<CPAN> module used by C<cpan> with some new
functionalities. Although some C<cpanp> commands differ from the ones
available on C<cpan>, the basic behavior is similar. To install from
the command line add the "C<-i>" switch:

    cpanp -i Module::Name Another::Module

For the interactive shell, C<cpanp> also uses the C<i> command (see A<cpaninstall>).

=head2 *Using C<cpanm>

X<Command, cpanm> X<cpanm> C<cpanm> is available through
X<App::Cpanminus> C<App::Cpanminus> module. The main advantage of
C<cpanm> regarding the other two approaches described above is
efficiency. C<cpanm> is very quick, as it doesn't perform the amount
of checks C<cpan> or C<cpanp> does, and finds out about modules via the MetaCPAN
API, rather than by parsing large indexes - this provides fast operation, and
ensures fresh module versions.

Install the module, and use C<cpanm> from the command lineN<<
C<cpanm> does not have an interactive shell. You must use it directly
from the command line. >>.

   cpanm --sudo Module::Name another::Module

The "C<--sudo>" switch is used to ask C<cpanm> to call C<sudo> when
installing the module. This way you can call C<cpanm> from your user,
knowing the when needed a password will be asked.

=head2 *ActivePerl PPM

X<PPM> X<ActivePerl> PPM stands for I<Perl Package Manager>, and it is
an application by ActiveState to install modules from their own module
repository. These packages have the advantage of being pre-compiled,
making it easier to install on Windows machines without a compiler
available. The main drawback is that PPM repositories do not have all
available modules from CPAN, so you may well find that the module you
need is not available, or is somewhat outdated.

Therefore, the authors suggest Windows users to download the Strawberry
Perl X<Strawberry Perl> distribution which includes C<cpan> and a quite
complete build system.

=head2 *Manual Install

X<Module, manual installation> The process of installing a module by
hand depends a little on your operating system.  The instructions
presented here describe the most usual process. First, get the module
archive from a CPAN mirror. These files are usually named I<tarballs>,
and are compressed using C<gzip> and archived by C<tar>. For this
example we will describe the process of installing C<Try::Tiny>:

=begin screen Manual installation of a Perl Module
 
 $ tar zxf Try-Tiny-0.09.tar.gz
 $ cd Try-Tiny-0.09
 $ perl Makefile.PL
 Checking if your kit is complete...
 Looks good
 Writing Makefile for Try::Tiny
 Writing MYMETA.yml
 $ make
 cp lib/Try/Tiny.pm blib/lib/Try/Tiny.pm
 Manifying blib/man3/Try::Tiny.3
 $ make test
 PERL_DL_NONLAZY=1 /opt/local/bin/perl [...] t/*.t
 t/basic.t ....... ok     
 t/finally.t ..... ok     
 t/given_when.t .. ok   
 t/when.t ........ ok   
 All tests successful.
 Files=4, Tests=48,  0 wallclock secs
 ( 0.06 usr  0.02 sys +  0.14 cusr  0.03 csys =  0.25 CPU)
 Result: PASS
 $ sudo make install
 [...]
 Appending installation info to /opt/local/lib/.../perllocal.pod
 $ cd ..
 $ rm -fr Try-Tiny-0.09*

=end screen

A brief explanation of the issued commands follows:

=begin small

=over

=item *

B<Line 1:> uncompress the tarball. The command used is the more common
for most Unix/BSD systems. It might be similar under Windows if you
have GNU tools installed. If not, you can download a tool to
uncompress these kind of files, like C<7zip> or C<IzArch>.

=item *

B<Line 2:> go to the folder created after uncompressing the tarball.

=item *

B<Line 3:> run C<perl> against the C<Makefile.PL> file, to configure the
module. Note that some modules use a different build system, named
C<Module::Build> X<Module, Module::Build> X<Module::Build> instead of
C<ExtUtils::MakeMaker> X<Module, ExtUtils::MakeMaker>
X<ExtUtils::MakeMaker>, the one responsible for C<Makefile.PL>. In
this case, you should run C<perl> against the C<Build.PL> file:

   perl Build.PL

=item *

B<Line 8:> this step is the process of building the module files. When the module
is just composed by Perl modules, this step just copy some files from
different places to a temporary staging folder named C<blib>. If the
module includes C<C> code, this step will also compile it.

Depending on your system C<make> might be named C<nmake> or
C<dmake>. Also, if in the previous step you needed to use C<Build.PL>,
then instead of C<make> you should run the newly created C<Build>
file.

=item *

B<Line 11:> after compiling the module it is a good idea to test if
your module is passing all the tests defined by the developers. To
test your newly compiled module run C<< make test >> or C<< ./Build test
>> depending on the module you are installing.

=item *

B<Line 21:> finally, time to install the module. Just run C<< make
install >> or C<< ./Build install >>. It might be a good idea to run
this command as superuser (for example, prepending C<sudo> to the
command) as, by default, modules are installed system-wide into a directory to
which normal users will not have write access..

=back

=end small

=head1 Installing Modules Locally

Perl lets you install modules on non standard directories. This is
relevant if you are not the system administrator and need to install
modules in your home directory, of if you like to have some modules
installed on different paths for different projects.

=head2 *Configuring CPAN for a Non-Standard Path

When using the usual CPAN clients (C<cpan> and C<cpanp>) it is
possible to define some variables where the modules will be installed.
Enter the CPAN shell and configure the variables C<makepl_arg> and
C<mbuild_arg>. They are the default arguments when running
C<Makefile.PL> or C<Build.PL>. The following screen shows the
interaction with C<cpan> to set the installation base to
C</home/user/mymodules>.

=begin screen Configuring CPAN install base

  $ cpan
  cpan> o conf makepl_arg INSTALL_BASE=/home/user/mymodules
  cpan> o conf mbuild_arg "--install_base /home/user/mymodules"
  cpan> o conf commit 

=end screen

After this, every time you run the C<cpan> shell, these configuration
variables will be loaded, and will be used when installing modules. You
will not need to configure the client again.

To use the modules installed in this location you have two
options. The first is to define an environment variable named
C<PERL5LIB>X<PERL5LIB> with the path where your modules got installed:

  export PERL5LIB=/home/user/mymodules

Unfortunately the Perl 5 installation path is quite complicated, and
probably you will need to define more than one path:

=begin small

 export PERL5LIB=/home/user/mymodules:/home/user/mymodules/5.14.0/:
 /home/user/mymodules/site_perl/5.14.0/:/home/user/mymodules/site_perl/

=end small

A more interesting and versatile method is to use the C<lib> pragma in
the beginning of all your script files, followed by the path names
where to find modules:

  use lib '/home/user/mymodules';
  
=head2 *Using C<local::lib> Module

X<Module, local::lib> X<local::lib>

The module C<local::lib> makes it easier to have a module tree in your
home (by default, C<~/perl5>), install modules and use them. To start
with, you need C<local::lib> in your system. If your system doesn't
have this module installed and your administrator is not willing to
install it, you can install it using the I<bootstrapping> technique.

First, download the C<local::lib> tarball from a CPAN mirror. Extract
it, and run:

   perl Makefile.PL --bootstrap

The system should ask you some questions. You can let it configure as
much as possible automatically. Then, run:

   make test && make install

After this, you need to set up your environment variables. You can the
list of environment variables to define running:

   perl -I$HOME/perl5/lib/perl5 -Mlocal::lib

Add the output of this command to your C<~/.bashrc> or your
C<~/.cshrc> file, depending on the shell you are running (Bourne shell
or C shell, respectively). After this step you might need to reload
the config file (or close and open a new shell).

To install modules use one of the following command lines:

  cpan -I Module::Name
  cpanm -l Module::Name

As some of these commands just works on recent versions, you can use
instead:

  perl -MCPAN -Mlocal::lib -e 'CPAN::install("Module::Name")'

Now, you can write your scripts adding the following line in the
beginning of your file:

  use local::lib;

If you prefer to use the C<lib> pragma, you can use:

  use lib '/home/user/perl5';

=head2 *Using App::perlbrew

X<Module, App::perlbrew> X<App::perlbrew>

C<App::perlbrew> is something completely different. Its main purpose
is not to install Perl modules locally, but to install a B<full> Perl
version locally. First of all, install the module. Although you can
install the module like a standard one, the author defends that the
best installation procedure is to execute the following command on
your shell:

      curl -L http://xrl.us/perlbrewinstall | bash

This will install C<perlbrew> in your home folder, under
C<~/perl5/perlbrew/bin>. After installation, follow the on-screen
instructions to set up your C<.bashrc> or C<.cshrc> to define the
correct environment variables.

After this you need to reload your shell configuration files or start
a new shell session. To initialize the C<perlbrew> folders run:

      perlbrew init

Then, a good idea is to install a local C<cpanm> to your C<perlbrew>
installation. This can be easily done by:

      perlbrew install-cpanm

And now everything is set to start using C<App::perlbrew>.

=over

=item B<Installing a Perl version>

C<perlbrew> is great if you need more than one Perl version installed
in your system. For example, because if you are a module developer and
want to test your software against different Perl versions, or because
you have different Perl projects that depend on different Perl
versions.

To install a Perl version using C<perlbrew> is simple. Just issue the
command:

   perlbrew install perl-5.14.0

You just need to know the official version name. If everything goes
well you should end up with a new Perl installed in your home. For
Perl 5.14.0, it will get installed on (using default the configuration
values):

   ~/perl5/perlbrew/perls/perl-5.14.0/bin/perl

=item B<Switching from Perl versions>

Having more than on Perl installed in the system it gets crucial to
know what Perl versions are installed, and to switch from different
Perl versions. A list of the Perl versions installed in your system is
available using:

   perlbrew list

It lists the name or the path to the Perl interpreter, and its
versions. The current Perl version is marked with an asterisk. You can
use a Perl version temporarily for the current shell with:

   perlbrew use perl-5.14.0

All consequent commands will use that Perl version, but any other
shell or new shell will still use the previous Perl interpreter.
To switch to other Perl interpreter globally (for your user) use:

   perlbrew switch perl-5.14.0

=item B<Installing modules>

The modules installation is simple. Switch to the Perl where you want
to install the module, and use C<cpanm>:

   cpanm Module::Name

The module will be installed in the tree for that specific Perl. This
means that every time you switch from Perl version an installed module
can be no longer available.

=back

Although C<perlbrew> is quite interesting and powerful, it is still
under heavy development and has some known problems. To use it well
you need some expertise. For further documentation check the
C<perlbrew> page.

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:
